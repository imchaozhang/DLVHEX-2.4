% The only answer set of the program is {a, b}.
% 
% This program contains a UFS which is tricky to detect if disjunctive rules are transformed to choice rules (as implemented in the clasp backend).
% 
% The program has the following components:
% {a, b} with rules  a v b v c.
%                    a :- b.
%                    b :- a.
%                    a :- c.
% {c} with rule      a v b v c.
%
% Note that the component {c} contains a Non-HCF disjunctive rule (a v b v c.), but is not Non-HCF itself.
% Therefore, the optimization would skip the UFS check for the component {c} (and do it for {a, b}).
% 
% If disjunctive rules are considered as such, this is sufficient because the (polynomial) UFS check implemented
% directly in the reasoner detects the unfounded set:
%    A candidate is {c, a, b}, but none of these atoms can use the rule a v b v c. as source because it is satisfied independently of {a}, {b} and {c}.
% However, if disjunctive rules are transformed to choice rules, then a v b v c. becomes 1{a, b, c} and MULTIPLE atoms may use it as source.
% 
% However, in contrast to trickyufs.hex, the singleton loop nogoods detect the unfounded set in this example.
% For trickyufs.hex the singleton loop nogoods are not sufficient because both components have more than one atom
% and the (exponential) UFS check is necessary.

a v b v c.
a :- b.
b :- a.
a :- c.
