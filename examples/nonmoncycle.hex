% This example demonstrates that the old implementation of the FLP check is wrong.
% &testNonmon[p](a) implements the following mapping: {} -> {2}, {1} -> {1}, {2} -> {1}, {1,2} -> {1,2}.
% Here, the guessing program has two models: {p(1)} and {p(1),p(2)}, where {p(1)} is subset-minimal.
% The reduct f P^{p(1)} = f P^{p(2)} =
%   { dom(1). dom(2). p(1) :- &testNonmon[p](1), dom(1). } has a smaller model {}.
% As the old implementation checks only if a candidate is a model of the reduct,
% but not if it is a subset-minimal model, the FLP check is wrongly passed.

% {} :          &testNonmon[p](1) = false, &testNonmon[p](2) = true
% {p(1)} :      &testNonmon[p](1) = true,  &testNonmon[p](2) = false
% {p(2)} :      &testNonmon[p](1) = true,  &testNonmon[p](2) = false
% {p(1),p(2)} : &testNonmon[p](1) = true,  &testNonmon[p](2) = true
%
% f P^\emptyset = { dom(1). dom(2). p(2) :- &testNonmon[p](2), dom(2). } with no models
% f P^{p(1)} =    { dom(1). dom(2). p(1) :- &testNonmon[p](1), dom(1). } with models {} and {p(1)}
% f P^{p(2)} =    { dom(1). dom(2). p(1) :- &testNonmon[p](1), dom(1). } with models {} and {p(1)}
% f P^{p(1),p(2)}={ dom(1). dom(2). p(1) :- &testNonmon[p](1), dom(1).
%                                   p(2) :- &testNonmon[p](2), dom(2). } with models {p(1)} and {p(1),p(2)}

dom(1).
dom(2).

p(X) :- &testNonmon[p](X), dom(X).
