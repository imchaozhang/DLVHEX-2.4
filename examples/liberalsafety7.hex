% With Greedy Heuristics we have two components:
% Component 1
p(a) v p(b).

% Component 2
d(a).
d(b).
d(c).
r(X) :- &testSetMinus[d,p](X)<finitedomain,monotonic d>.

% &testSetMinus[d,p](X) receives nonmonotonic input, but from a different component.
% Thus, the nonmonotonic part is stratified. Consequently, the domain exploration does not need to guess all assignents to p(a) and p(b).

% With monolithic Heuristics, the nonmonotonic part is not stratified any longer because we have only one component.
% Then the domain-exploration needs to guess all 4 assignments to p(a) and p(b).
